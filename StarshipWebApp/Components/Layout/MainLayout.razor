@inherits LayoutComponentBase
@using Radzen
@using Radzen.Blazor
@using MudBlazor
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


@* MudBlazorProviders *@
<MudThemeProvider />
<MudPopoverProvider />
<MudSnackbarProvider />

@* RadzenProviders *@
<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<CascadingValue Value="User" Name="User">
    <RadzenLayout>
        <AuthorizeView>
            <RadzenHeader>
                <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                    <RadzenLabel Text="Starships" />
                </RadzenStack>
            </RadzenHeader>
            <RadzenSidebar Responsive="false" Style="width: max-content">
                <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
                    <RadzenPanelMenuItem Text="Home" Icon="home" Click="@(() => NavigationManager.NavigateTo("/home", true))" />
                    <RadzenPanelMenuItem Text="Starships" Icon="auto_awesome" Click="@(() => NavigationManager.NavigateTo("/starships", true))" />
                    <RadzenPanelMenuItem Text="Logout" Icon="logout" Click="@(() => NavigationManager.NavigateTo("/logout", true))" />
                </RadzenPanelMenu>
            </RadzenSidebar>
        </AuthorizeView>

        <RadzenBody>

            <div class="rz-p-4">

                @Body

            </div>
        </RadzenBody>
        <RadzenFooter>
            Developed by DevMando for GoEngineer.
        </RadzenFooter>

    </RadzenLayout>
</CascadingValue>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="_content/MudBlazor/MudBlazor.min.js"></script>

@code {
    bool sidebarExpanded = true;
    public User User;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var principal = authState.User;
        User = principal.ToAppUser();
    }
}